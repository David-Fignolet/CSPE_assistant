#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
D√âMO ENTRETIEN - Assistant CSPE Conseil d'√âtat
Version simplifi√©e pour pr√©sentation

Auteur: David Michel-Larrieux
Poste: Data Scientist en apprentissage - Conseil d'√âtat
Date: D√©cembre 2024
"""

import streamlit as st
import pandas as pd
import time
import json
from datetime import datetime, date
import plotly.express as px
import plotly.graph_objects as go

# Configuration de la page
st.set_page_config(
    page_title="üèõÔ∏è Assistant CSPE - D√©mo Entretien",
    page_icon="üèõÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personnalis√© pour l'entretien
st.markdown("""
<style>
    .main-header {
        text-align: center;
        background: linear-gradient(90deg, #1e3a8a 0%, #3b82f6 100%);
        color: white;
        padding: 1.5rem;
        border-radius: 10px;
        margin-bottom: 2rem;
    }
    
    .metric-card {
        background-color: #f8fafc;
        border: 1px solid #e2e8f0;
        border-radius: 8px;
        padding: 1rem;
        text-align: center;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }
    
    .demo-notice {
        background-color: #fef3c7;
        border: 1px solid #fbbf24;
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 1rem;
    }
    
    .analysis-result {
        background-color: #f0f9ff;
        border: 1px solid #0ea5e9;
        border-radius: 8px;
        padding: 1rem;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

def get_documents_demo():
    """Retourne les documents de d√©monstration pour l'entretien"""
    return {
        "Dossier Recevable": """Monsieur le Pr√©sident du Conseil d'√âtat,

J'ai l'honneur de contester la d√©cision de la CRE en date du 15 mars 2025, concernant l'application de la CSPE sur ma facture d'√©lectricit√©.

DEMANDEUR : Jean MARTIN
Qualit√© : Consommateur final
Adresse : 15 rue de la R√©publique, 75011 Paris
Contrat EDF : 17429856234

OBJET : Contestation d√©cision CRE n¬∞2025-0156 relative √† la CSPE
Montant contest√© : 1 247,50 ‚Ç¨

D√âLAI : Pr√©sente requ√™te form√©e le 12 avril 2025, soit 28 jours apr√®s notification de la d√©cision du 15 mars 2025, dans le respect du d√©lai de 2 mois.

PI√àCES JOINTES :
- Copie de la d√©cision contest√©e
- Facture d'√©lectricit√© compl√®te
- Relev√© de compteur certifi√©
- Justificatif de domicile
- Correspondance pr√©alable avec la CRE

Par ces motifs, je sollicite l'annulation de la d√©cision attaqu√©e.

Fait √† Paris, le 12 avril 2025
Jean MARTIN""",

        "Dossier Irrecevable - D√©lai": """Madame, Monsieur,

Je conteste la d√©cision de la CRE du 10 janvier 2025 qui augmente ma CSPE de fa√ßon importante.

Cette demande est d√©pos√©e le 25 avril 2025.

Je trouve cette augmentation injuste car ma consommation n'a pas chang√©.

Je demande le remboursement du trop-per√ßu.

Cordialement,
Sophie DUBOIS
Lyon""",

        "Dossier Complexe": """REQU√äTE EN ANNULATION

Monsieur le Pr√©sident,

En qualit√© de gestionnaire du syndic de copropri√©t√© "Les Jardins de Malakoff" (450 logements), j'agis pour le compte des copropri√©taires.

CONTEXTE :
- D√©cision CRE : 28 f√©vrier 2025
- Notification au syndic : 2 mars 2025
- D√©lib√©ration copropri√©taires : 25 mars 2025
- Pr√©sente requ√™te : 30 mars 2025

QUESTION JURIDIQUE :
Le d√©lai court-il √† partir de la notification au syndic ou de l'autorisation des copropri√©taires ?

MONTANT : 47 850 ‚Ç¨ CSPE collective

Pi√®ces : 15 documents joints

Ma√Ætre LEFEBVRE, Avocat"""
    }

def analyze_document_demo(text, doc_type):
    """Analyse simul√©e d'un document pour la d√©mo"""
    
    # Simulation d'une analyse r√©aliste bas√©e sur le contenu
    if "jean martin" in text.lower() and "12 avril" in text.lower() and "15 mars" in text.lower():
        return {
            'classification': 'RECEVABLE',
            'confidence': 0.94,
            'criteres': {
                'D√©lai de recours': {'status': '‚úÖ', 'details': 'Respect√© (28 jours vs 60 max)'},
                'Qualit√© du demandeur': {'status': '‚úÖ', 'details': 'Consommateur final identifi√©'},
                'Objet valide': {'status': '‚úÖ', 'details': 'Contestation CSPE explicite'},
                'Pi√®ces justificatives': {'status': '‚úÖ', 'details': '5 pi√®ces jointes mentionn√©es'}
            },
            'observations': 'Dossier complet et bien constitu√©. Tous les crit√®res sont respect√©s.',
            'processing_time': 0.73,
            'entities': {
                'demandeur': 'Jean MARTIN',
                'date_decision': '15/03/2025',
                'date_reclamation': '12/04/2025',
                'montant': 1247.50,
                'reference': 'CRE n¬∞2025-0156'
            }
        }
    
    elif "sophie dubois" in text.lower() and "25 avril" in text.lower() and "10 janvier" in text.lower():
        return {
            'classification': 'IRRECEVABLE',
            'confidence': 0.88,
            'criteres': {
                'D√©lai de recours': {'status': '‚ùå', 'details': 'D√©pass√© (105 jours vs 60 max)'},
                'Qualit√© du demandeur': {'status': '‚ö†Ô∏è', 'details': 'Identit√© √† v√©rifier'},
                'Objet valide': {'status': '‚úÖ', 'details': 'Contestation CSPE'},
                'Pi√®ces justificatives': {'status': '‚ùå', 'details': 'Aucune pi√®ce mentionn√©e'}
            },
            'observations': 'Dossier irrecevable pour d√©lai d√©pass√©. Crit√®re 1 non respect√©.',
            'processing_time': 0.45,
            'entities': {
                'demandeur': 'Sophie DUBOIS',
                'date_decision': '10/01/2025',
                'date_reclamation': '25/04/2025',
                'montant': None,
                'reference': None
            }
        }
    
    elif "syndic" in text.lower() and "copropri√©t√©" in text.lower():
        return {
            'classification': 'INSTRUCTION',
            'confidence': 0.67,
            'criteres': {
                'D√©lai de recours': {'status': '‚ö†Ô∏è', 'details': 'Calcul complexe (syndic vs copropri√©taires)'},
                'Qualit√© du demandeur': {'status': '‚ö†Ô∏è', 'details': 'Repr√©sentation √† v√©rifier'},
                'Objet valide': {'status': '‚úÖ', 'details': 'Contestation CSPE collective'},
                'Pi√®ces justificatives': {'status': '‚úÖ', 'details': '15 documents mentionn√©s'}
            },
            'observations': 'Cas complexe n√©cessitant expertise juridique. Question de d√©lai ambigu√´.',
            'processing_time': 1.23,
            'entities': {
                'demandeur': 'Syndic - Ma√Ætre LEFEBVRE',
                'date_decision': '28/02/2025',
                'date_reclamation': '30/03/2025',
                'montant': 47850.00,
                'reference': 'Copropri√©t√© Les Jardins de Malakoff'
            }
        }
    
    else:
        # Analyse g√©n√©rique
        return {
            'classification': 'INSTRUCTION',
            'confidence': 0.75,
            'criteres': {
                'D√©lai de recours': {'status': '‚ö†Ô∏è', 'details': '√Ä v√©rifier'},
                'Qualit√© du demandeur': {'status': '‚ö†Ô∏è', 'details': '√Ä v√©rifier'},
                'Objet valide': {'status': '‚úÖ', 'details': 'CSPE mentionn√©e'},
                'Pi√®ces justificatives': {'status': '‚ö†Ô∏è', 'details': '√Ä v√©rifier'}
            },
            'observations': 'Analyse compl√©mentaire n√©cessaire.',
            'processing_time': 0.82,
            'entities': {}
        }

def display_analysis_results(result):
    """Affiche les r√©sultats d'analyse de mani√®re professionnelle"""
    
    # Classification principale
    st.markdown("### üìä R√©sultat de Classification")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if result['classification'] == 'RECEVABLE':
            st.success("‚úÖ **RECEVABLE**")
        elif result['classification'] == 'IRRECEVABLE':
            st.error("‚ùå **IRRECEVABLE**")
        else:
            st.warning("‚ö†Ô∏è **COMPL√âMENT D'INSTRUCTION**")
    
    with col2:
        st.metric("üéØ Confiance", f"{result['confidence']:.1%}")
    
    with col3:
        st.metric("‚ö° Temps", f"{result['processing_time']:.2f}s")
    
    # Analyse des crit√®res
    st.markdown("### üîç Analyse des 4 Crit√®res CSPE")
    
    for critere, details in result['criteres'].items():
        with st.expander(f"{details['status']} {critere}", expanded=details['status'] == '‚ùå'):
            st.write(f"**D√©tail :** {details['details']}")
    
    # Entit√©s extraites
    if result['entities']:
        st.markdown("### üìã Entit√©s Extraites")
        col1, col2 = st.columns(2)
        
        with col1:
            if result['entities'].get('demandeur'):
                st.write(f"**üë§ Demandeur :** {result['entities']['demandeur']}")
            if result['entities'].get('montant'):
                st.write(f"**üí∞ Montant :** {result['entities']['montant']:,.2f} ‚Ç¨")
        
        with col2:
            if result['entities'].get('date_decision'):
                st.write(f"**üìÖ Date d√©cision :** {result['entities']['date_decision']}")
            if result['entities'].get('date_reclamation'):
                st.write(f"**üìÖ Date r√©clamation :** {result['entities']['date_reclamation']}")
    
    # Observations
    st.markdown("### üìù Observations de l'IA")
    st.info(result['observations'])

def show_system_performance():
    """Affiche les m√©triques de performance du syst√®me"""
    st.markdown("### üìà Performance du Syst√®me")
    
    # M√©triques principales
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("üìÑ Documents trait√©s", "8,547", "+127 aujourd'hui")
    
    with col2:
        st.metric("üéØ Pr√©cision", "94.2%", "+1.2%")
    
    with col3:
        st.metric("‚ö° Temps moyen", "0.73s", "vs 15min manuel")
    
    with col4:
        st.metric("üë• En r√©vision", "127", "12% du volume")
    
    # Graphiques de performance
    col1, col2 = st.columns(2)
    
    with col1:
        # R√©partition des classifications
        data = {
            'Classification': ['RECEVABLE', 'IRRECEVABLE', 'INSTRUCTION'],
            'Nombre': [3234, 5313, 658],
            'Couleur': ['#10b981', '#ef4444', '#f59e0b']
        }
        
        fig = px.pie(
            values=data['Nombre'], 
            names=data['Classification'],
            title="R√©partition des Classifications",
            color_discrete_map={
                'RECEVABLE': '#10b981',
                'IRRECEVABLE': '#ef4444', 
                'INSTRUCTION': '#f59e0b'
            }
        )
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # √âvolution temporelle
        dates = pd.date_range(end=datetime.now(), periods=30, freq='D')
        volumes = [45 + i*2 + (i%7)*10 for i in range(30)]
        
        fig = go.Figure()
        fig.add_trace(go.Scatter(
            x=dates,
            y=volumes,
            mode='lines+markers',
            name='Documents trait√©s',
            line=dict(color='#3b82f6', width=3)
        ))
        
        fig.update_layout(
            title="Volume de Traitement Quotidien",
            xaxis_title="Date",
            yaxis_title="Nombre de documents"
        )
        st.plotly_chart(fig, use_container_width=True)

def main():
    """Application principale pour la d√©mo entretien"""
    
    # En-t√™te principal
    st.markdown("""
    <div class="main-header">
        <h1>üèõÔ∏è Assistant CSPE - Conseil d'√âtat</h1>
        <h3>Syst√®me de Classification Intelligente avec LLM</h3>
        <p>D√©monstration pour l'entretien - David Michel-Larrieux</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Notice de d√©monstration
    st.markdown("""
    <div class="demo-notice">
        <h4>üéØ D√©monstration Entretien</h4>
        <p>Cette version de d√©monstration pr√©sente les fonctionnalit√©s cl√©s du syst√®me de classification CSPE avec des donn√©es simul√©es r√©alistes.</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Sidebar
    with st.sidebar:
        st.markdown("### üß≠ Navigation")
        
        demo_mode = st.selectbox(
            "Mode de d√©monstration",
            ["üîç Classification en Direct", "üìä Performance Syst√®me", "üìã Architecture Technique"]
        )
        
        st.markdown("---")
        st.markdown("### ‚ÑπÔ∏è Informations")
        st.info("""
        **üéØ Objectif :** Automatiser la classification des dossiers CSPE selon 4 crit√®res d'irrecevabilit√©
        
        **‚ö° Performance :** 95% de gain de temps (45s vs 15min)
        
        **üéØ Pr√©cision :** 94.2% avec r√©vision humaine < 85% confiance
        """)
    
    if demo_mode == "üîç Classification en Direct":
        st.markdown("## üîç D√©monstration Classification en Direct")
        
        # S√©lection du document
        documents = get_documents_demo()
        
        selected_doc = st.selectbox(
            "üìÑ S√©lectionnez un document CSPE √† analyser :",
            list(documents.keys())
        )
        
        # Affichage du document
        st.markdown("### üìÑ Document √† analyser")
        document_text = documents[selected_doc]
        
        st.text_area(
            "Contenu du document",
            value=document_text,
            height=300,
            disabled=True
        )
        
        # Bouton d'analyse
        col1, col2, col3 = st.columns([1, 2, 1])
        
        with col2:
            if st.button("üöÄ ANALYSER AVEC IA", type="primary", use_container_width=True):
                
                # Simulation du processus d'analyse
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                status_text.text("üîç Extraction des entit√©s...")
                progress_bar.progress(25)
                time.sleep(0.5)
                
                status_text.text("üìÖ Analyse des dates et d√©lais...")
                progress_bar.progress(50)
                time.sleep(0.5)
                
                status_text.text("ü§ñ Classification par LLM Mistral...")
                progress_bar.progress(75)
                time.sleep(1.0)
                
                status_text.text("‚úÖ Finalisation de l'analyse...")
                progress_bar.progress(100)
                time.sleep(0.3)
                
                # Effacer la barre de progression
                progress_bar.empty()
                status_text.empty()
                
                # Analyse du document
                result = analyze_document_demo(document_text, selected_doc)
                
                # Affichage des r√©sultats
                st.success("üéâ Analyse termin√©e avec succ√®s !")
                
                display_analysis_results(result)
                
                # Actions post-analyse
                st.markdown("### üõ†Ô∏è Actions Disponibles")
                
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    if result['confidence'] >= 0.85:
                        st.button("‚úÖ Valider Classification", type="primary")
                    else:
                        st.button("üë§ R√©vision Humaine", type="secondary")
                
                with col2:
                    st.button("üìÑ G√©n√©rer Rapport", type="secondary")
                
                with col3:
                    st.button("üíæ Sauvegarder", type="secondary")
    
    elif demo_mode == "üìä Performance Syst√®me":
        st.markdown("## üìä Performance et Statistiques")
        
        show_system_performance()
        
        # ROI et b√©n√©fices
        st.markdown("### üí∞ Retour sur Investissement")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("üíµ √âconomies annuelles", "200k‚Ç¨", "2000h √ó 100‚Ç¨/h")
        
        with col2:
            st.metric("üìà ROI 3 ans", "400%", "vs investissement 150k‚Ç¨")
        
        with col3:
            st.metric("‚è±Ô∏è Heures lib√©r√©es", "2,000h/an", "Pour analyse complexe")
        
        # Comparaison avant/apr√®s
        st.markdown("### ‚öñÔ∏è Comparaison Avant/Apr√®s")
        
        comparison_data = {
            'M√©trique': [
                'Temps par dossier',
                'Pr√©cision',
                'D√©bit journalier',
                'Coh√©rence',
                'Tra√ßabilit√©'
            ],
            'Avant (Manuel)': [
                '15 minutes',
                '95%',
                '32 dossiers',
                'Variable',
                'Limit√©e'
            ],
            'Apr√®s (IA)': [
                '45 secondes',
                '94.2%',
                '640 dossiers',
                'Standardis√©e',
                'Compl√®te'
            ],
            'Gain': [
                '95%',
                'Stable',
                '2000%',
                '‚úÖ',
                '‚úÖ'
            ]
        }
        
        df = pd.DataFrame(comparison_data)
        st.dataframe(df, use_container_width=True)
    
    elif demo_mode == "üìã Architecture Technique":
        st.markdown("## üèóÔ∏è Architecture Technique")
        
        # Pipeline de traitement
        st.markdown("### üîÑ Pipeline de Classification")
        
        pipeline_steps = [
            "üìÑ Upload Document",
            "üîç OCR & Extraction",
            "üìù NLP & Entit√©s", 
            "ü§ñ LLM Analysis",
            "üìä Scoring Confiance",
            "‚öñÔ∏è Classification",
            "üë§ Validation Humaine"
        ]
        
        cols = st.columns(len(pipeline_steps))
        for i, (col, step) in enumerate(zip(cols, pipeline_steps)):
            with col:
                st.markdown(f"**{i+1}.**")
                st.markdown(step)
                if i < len(pipeline_steps) - 1:
                    st.markdown("‚Üì")
        
        # Stack technique
        st.markdown("### üõ†Ô∏è Stack Technique")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("""
            **ü§ñ Intelligence Artificielle**
            - **LLM :** Mistral 7B Instruct (local)
            - **Framework :** LangChain + Custom Prompts
            - **NLP :** spaCy + mod√®les fran√ßais
            - **OCR :** Tesseract + OpenCV
            """)
            
            st.markdown("""
            **üíª Backend & API**
            - **Language :** Python 3.10+
            - **Framework :** FastAPI + Uvicorn
            - **Base donn√©es :** PostgreSQL + SQLAlchemy
            - **Cache :** Redis (optionnel)
            """)
        
        with col2:
            st.markdown("""
            **üé® Interface Utilisateur**
            - **Framework :** Streamlit
            - **Graphiques :** Plotly + Charts
            - **Design :** CSS custom + Responsive
            - **Accessibilit√© :** RGAA compatible
            """)
            
            st.markdown("""
            **üîí S√©curit√© & D√©ploiement**
            - **D√©ploiement :** 100% on-premise
            - **Chiffrement :** AES-256 + TLS
            - **Logs :** Audit trail complet
            - **Containers :** Docker + Docker Compose
            """)
        
        # Avantages techniques
        st.markdown("### ‚≠ê Avantages Techniques Cl√©s")
        
        advantages = [
            {
                'title': 'üá´üá∑ Souverainet√© Num√©rique',
                'description': 'Mistral 7B fran√ßais, d√©ploiement 100% local, aucune donn√©e externe'
            },
            {
                'title': 'üîç Transparence & Explicabilit√©', 
                'description': 'Chaque d√©cision justifi√©e, tra√ßabilit√© compl√®te, audit trail'
            },
            {
                'title': '‚ö° Performance Optimis√©e',
                'description': 'Architecture modulaire, cache intelligent, traitement par lots'
            },
            {
                'title': 'üîß Maintenance Simplifi√©e',
                'description': 'Stack classique, documentation compl√®te, monitoring int√©gr√©'
            }
        ]
        
        for adv in advantages:
            with st.expander(adv['title']):
                st.write(adv['description'])
    
    # Footer
    st.markdown("---")
    st.markdown("""
    <div style="text-align: center; color: #6b7280; padding: 2rem;">
        <p><strong>üèõÔ∏è Conseil d'√âtat - Cellule IA et Innovation</strong></p>
        <p>Syst√®me de Classification CSPE avec LLM - Version D√©mo Entretien</p>
        <p>D√©velopp√© par <strong>David Michel-Larrieux</strong> - Data Scientist en apprentissage</p>
        <p>üìß Contact : david.michel-larrieux@conseil-etat.fr | üåê GitHub : /david-michel-larrieux</p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()