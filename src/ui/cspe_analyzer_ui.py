import streamlit as st
from pathlib import Path
import tempfile
import json
import os
import sys
from typing import Dict, Any, List, Optional
from datetime import datetime

# Ajout du r√©pertoire parent au path pour les imports
sys.path.append(str(Path(__file__).parent.parent))

from models.expert_analyzer import CSPEExpertAnalyzer, Decision

def display_analysis(report: Dict[str, Any]) -> None:
    """Affiche le rapport d'analyse de mani√®re interactive."""
    st.header("üìã Rapport d'analyse CSPE")
    
    # Affichage de la d√©cision globale
    decision = report.get('decision_globale', 'inconnu').upper()
    if decision == 'RECEVABLE':
        st.success(f"## D√©cision : {decision} ‚úÖ")
    elif decision == 'IRRECEVABLE':
        st.error(f"## D√©cision : {decision} ‚ùå")
    else:
        st.warning(f"## D√©cision : {decision} ‚ö†Ô∏è")
    
    # D√©tails des crit√®res
    st.subheader("Analyse d√©taill√©e des crit√®res")
    
    criteria = report.get('criteria', {})
    for critere, details in criteria.items():
        # Utilisation de st.container() au lieu de st.expander pour √©viter l'imbrication
        with st.container():
            st.markdown(f"**{critere.replace('_', ' ').title()}**")
            st.write(f"**D√©cision :** {details.get('decision', 'N/A')}")
            st.write(f"**D√©tails :** {details.get('details', 'Non sp√©cifi√©')}")
            st.write(f"**Niveau de confiance :** {details.get('confidence', 0) * 100:.1f}%")
            st.markdown("---")  # Ligne de s√©paration
    
    # Donn√©es extraites
    if 'extracted_data' in report and report['extracted_data']:
        with st.expander("üîç Donn√©es extraites (cliquez pour afficher)"):
            st.json(report['extracted_data'], expanded=False)

def process_uploaded_file(uploaded_file, analyzer: CSPEExpertAnalyzer) -> Optional[Dict]:
    """Traite un fichier upload√© et retourne le r√©sultat de l'analyse."""
    try:
        # Cr√©er un fichier temporaire
        with tempfile.NamedTemporaryFile(delete=False, suffix=Path(uploaded_file.name).suffix) as tmp_file:
            # √âcrire le contenu du fichier upload√©
            tmp_file.write(uploaded_file.getvalue())
            tmp_path = tmp_file.name
        
        try:
            # Analyser le fichier
            with st.spinner(f"Analyse de {uploaded_file.name}..."):
                result = analyzer.analyze_file(tmp_path)
                return result
        finally:
            # Nettoyer le fichier temporaire
            try:
                os.unlink(tmp_path)
            except Exception as e:
                st.warning(f"Attention : impossible de supprimer le fichier temporaire : {e}")
    except Exception as e:
        st.error(f"Erreur lors du traitement du fichier {uploaded_file.name} : {str(e)}")
    return None

def main():
    st.set_page_config(
        page_title="Analyse CSPE - Expert Conseil d'√âtat",
        page_icon="üèõÔ∏è",
        layout="wide"
    )
    
    st.title("üèõÔ∏è Analyse Expert CSPE - Conseil d'√âtat")
    
    # Style personnalis√©
    st.markdown("""
    <style>
    .stApp {
        max-width: 1200px;
        margin: 0 auto;
    }
    .stButton>button {
        background-color: #0055b7;
        color: white;
    }
    .stButton>button:hover {
        background-color: #003d82;
    }
    .file-uploader {
        border: 2px dashed #4CAF50;
        border-radius: 5px;
        padding: 20px;
        text-align: center;
        margin: 20px 0;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # Initialisation de l'analyseur
    if 'analyzer' not in st.session_state:
        st.session_state.analyzer = CSPEExpertAnalyzer()
    
    # En-t√™te avec description
    st.markdown("""
    ### Bienvenue sur l'outil d'analyse des dossiers CSPE
    
    Cet outil vous permet d'analyser des documents li√©s aux demandes de remboursement de la CSPE 
    selon les crit√®res du Conseil d'√âtat. T√©l√©versez un ou plusieurs documents pour commencer.
    """)
    
    # Zone de d√©p√¥t de fichiers
    st.markdown("<div class='file-uploader'>", unsafe_allow_html=True)
    uploaded_files = st.file_uploader(
        "üì§ T√©l√©versez vos documents CSPE (PDF, DOCX, TXT, images)",
        type=["pdf", "docx", "txt", "png", "jpg", "jpeg"],
        accept_multiple_files=True,
        key="file_uploader"
    )
    st.markdown("</div>", unsafe_allow_html=True)
    
    # Bouton d'analyse
    if st.button("üîç Lancer l'analyse", disabled=not uploaded_files, key="analyze_btn"):
        if not uploaded_files:
            st.warning("Veuillez d'abord s√©lectionner au moins un fichier √† analyser.")
            return
            
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        # Traitement de chaque fichier
        results = []
        for i, uploaded_file in enumerate(uploaded_files):
            # Mise √† jour de la progression
            progress = int((i / len(uploaded_files)) * 100)
            progress_bar.progress(progress)
            status_text.text(f"Traitement du fichier {i+1}/{len(uploaded_files)} : {uploaded_file.name}")
            
            # Traitement du fichier
            with st.expander(f"üìÑ {uploaded_file.name}", expanded=True):
                result = process_uploaded_file(uploaded_file, st.session_state.analyzer)
                
                if result:
                    results.append((uploaded_file.name, result))
                    display_analysis(result)
                    
                    # Bouton de t√©l√©chargement
                    json_report = json.dumps(result, indent=2, ensure_ascii=False)
                    st.download_button(
                        label=f"üíæ T√©l√©charger l'analyse de {uploaded_file.name}",
                        data=json_report,
                        file_name=f"rapport_cspe_{Path(uploaded_file.name).stem}.json",
                        mime="application/json",
                        key=f"dl_{uploaded_file.name}"
                    )
                
                st.divider()
        
        # R√©initialisation de la barre de progression
        progress_bar.empty()
        status_text.empty()
        
        if results:
            st.success(f"‚úÖ Analyse termin√©e pour {len(results)} fichier(s) !")
            
            # Option pour t√©l√©charger tous les rapports en un seul fichier
            if len(results) > 1:
                all_reports = {name: result for name, result in results}
                st.download_button(
                    label="üì• T√©l√©charger tous les rapports (ZIP)",
                    data=json.dumps(all_reports, indent=2, ensure_ascii=False),
                    file_name=f"rapports_cspe_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                    mime="application/zip",
                    key="dl_all_reports"
                )
    
    # Section d'aide
    with st.expander("‚ÑπÔ∏è Comment utiliser cette application"):
        st.markdown("""
        ### Guide d'utilisation
        
        1. **T√©l√©versez** un ou plusieurs documents CSPE (factures, contrats, etc.)
           - Cliquez sur "Parcourir les fichiers" ou glissez-d√©posez les fichiers
           - Formats support√©s : PDF, DOCX, TXT, images (PNG, JPG, JPEG)
        
        2. Cliquez sur **"Lancer l'analyse"** pour commencer le traitement
        
        3. Consultez les r√©sultats d√©taill√©s pour chaque crit√®re
           - ‚úÖ Recevable : Le crit√®re est respect√©
           - ‚ùå Irrecevable : Le crit√®re n'est pas respect√©
           - ‚ö†Ô∏è √Ä compl√©ter : Informations manquantes pour statuer
        
        4. T√©l√©chargez les rapports d'analyse au format JSON
        
        ### Crit√®res d'analyse
        - **D√©lai de r√©clamation** : V√©rifie si la r√©clamation a √©t√© faite dans les d√©lais (avant le 31/12/N+1)
        - **P√©riode couverte** : V√©rifie si la p√©riode est comprise entre 2009 et 2015
        - **Prescription quadriennale** : V√©rifie si la r√©clamation est prescrite (d√©lai de 4 ans)
        - **R√©percussion client final** : V√©rifie si la CSPE a √©t√© r√©percut√©e sur le client final
        
        ### Besoin d'aide ?
        Pour toute question ou probl√®me technique, veuillez contacter l'√©quipe support.
        """)

if __name__ == "__main__":
    main()
