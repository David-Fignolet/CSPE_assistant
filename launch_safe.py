#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de lancement s√©curis√© pour l'Assistant CSPE
Garantit un d√©marrage sans erreur m√™me avec des d√©pendances manquantes
"""

import sys
import os
import subprocess
import time
from pathlib import Path

def check_python_version():
    """V√©rifie la version de Python"""
    if sys.version_info < (3, 7):
        print("‚ùå Python 3.7+ requis")
        print(f"   Version actuelle: {sys.version}")
        return False
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor}")
    return True

def check_and_install_minimal():
    """V√©rifie et installe les d√©pendances minimales"""
    essential_packages = ['streamlit', 'pandas']
    missing = []
    
    for package in essential_packages:
        try:
            __import__(package)
            print(f"‚úÖ {package} install√©")
        except ImportError:
            missing.append(package)
    
    if missing:
        print(f"\nüì¶ Installation des packages essentiels: {', '.join(missing)}")
        for package in missing:
            try:
                subprocess.check_call([sys.executable, '-m', 'pip', 'install', package, '--quiet'])
                print(f"   ‚úÖ {package} install√© avec succ√®s")
            except Exception as e:
                print(f"   ‚ùå Erreur installation {package}: {e}")
                return False
    
    return True

def find_free_port(start_port=8501, max_attempts=10):
    """Trouve un port libre pour Streamlit"""
    import socket
    
    for port in range(start_port, start_port + max_attempts):
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.bind(('', port))
                return port
        except:
            continue
    return None

def launch_app(mode='demo'):
    """Lance l'application dans le mode sp√©cifi√©"""
    # D√©terminer quel fichier lancer
    if mode == 'demo':
        app_file = 'demo_entretien.py'
    elif mode == 'full':
        app_file = 'app.py'
    elif mode == 'diagnostic':
        app_file = 'diagnostic.py'
    else:
        app_file = 'demo_entretien.py'
    
    # V√©rifier que le fichier existe
    if not Path(app_file).exists():
        print(f"‚ùå Fichier {app_file} introuvable")
        
        # Chercher des alternatives
        alternatives = []
        for file in ['demo_entretien.py', 'app.py', 'diagnostic.py']:
            if Path(file).exists():
                alternatives.append(file)
        
        if alternatives:
            app_file = alternatives[0]
            print(f"   ‚úÖ Utilisation de {app_file} √† la place")
        else:
            print("   ‚ùå Aucun fichier d'application trouv√©")
            return False
    
    # Trouver un port libre
    port = find_free_port()
    if not port:
        print("‚ùå Aucun port libre trouv√©")
        return False
    
    print(f"\nüöÄ Lancement de l'application sur le port {port}...")
    print(f"üìÅ Fichier: {app_file}")
    print(f"üåê URL: http://localhost:{port}")
    print("\n‚ö†Ô∏è  Gardez cette fen√™tre ouverte")
    print("‚úã Pour arr√™ter: Ctrl+C\n")
    
    # Lancement avec gestion d'erreur
    try:
        # Cr√©er le processus
        process = subprocess.Popen([
            sys.executable, '-m', 'streamlit', 'run',
            app_file,
            '--server.port', str(port),
            '--server.address', '0.0.0.0',
            '--browser.gatherUsageStats', 'false',
            '--logger.level', 'error'  # R√©duire les logs
        ])
        
        # Attendre que l'utilisateur arr√™te
        process.wait()
        
    except KeyboardInterrupt:
        print("\n\n‚úÖ Application ferm√©e par l'utilisateur")
        return True
    except Exception as e:
        print(f"\n‚ùå Erreur lors du lancement: {e}")
        return False
    
    return True

def main():
    """Fonction principale"""
    print("=" * 60)
    print("üèõÔ∏è  ASSISTANT CSPE - LANCEMENT S√âCURIS√â")
    print("    Syst√®me de Classification Intelligente")
    print("=" * 60)
    
    # √âtape 1: V√©rifier Python
    if not check_python_version():
        input("\nAppuyez sur Entr√©e pour fermer...")
        return 1
    
    # √âtape 2: V√©rifier/Installer d√©pendances minimales
    print("\nüîç V√©rification des d√©pendances...")
    if not check_and_install_minimal():
        print("\n‚ùå Impossible d'installer les d√©pendances requises")
        print("üí° Essayez: pip install streamlit pandas")
        input("\nAppuyez sur Entr√©e pour fermer...")
        return 1
    
    # √âtape 3: D√©terminer le mode
    if len(sys.argv) > 1:
        mode = sys.argv[1].replace('--mode=', '')
    else:
        print("\nüìã Modes disponibles:")
        print("1. demo    - D√©monstration (recommand√©)")
        print("2. full    - Application compl√®te")
        print("3. diagnostic - Diagnostic syst√®me")
        
        choice = input("\nChoisissez un mode (1/2/3) [d√©faut: 1]: ").strip()
        
        mode_map = {'1': 'demo', '2': 'full', '3': 'diagnostic'}
        mode = mode_map.get(choice, 'demo')
    
    print(f"\nüéØ Mode s√©lectionn√©: {mode}")
    
    # √âtape 4: V√©rifier les fichiers optionnels
    optional_files = {
        'document_processor.py': 'Traitement de documents',
        'database_memory.py': 'Gestion base de donn√©es',
        '.env': 'Configuration environnement'
    }
    
    print("\nüìÇ V√©rification des fichiers optionnels:")
    for file, desc in optional_files.items():
        if Path(file).exists():
            print(f"   ‚úÖ {file} - {desc}")
        else:
            print(f"   ‚ö†Ô∏è  {file} - {desc} (non trouv√©)")
    
    # √âtape 5: Lancer l'application
    if not launch_app(mode):
        print("\n‚ùå √âchec du lancement")
        input("\nAppuyez sur Entr√©e pour fermer...")
        return 1
    
    print("\n‚úÖ Application ferm√©e normalement")
    return 0

if __name__ == "__main__":
    try:
        exit_code = main()
        sys.exit(exit_code)
    except Exception as e:
        print(f"\n‚ùå Erreur critique: {e}")
        input("\nAppuyez sur Entr√©e pour fermer...")
        sys.exit(1)